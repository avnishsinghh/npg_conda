#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright Â© 2019, 2020 Genome Research Ltd. All rights reserved.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# @author Keith James <kdj@sanger.ac.uk>

from packaging.version import parse

import logging as log
import argparse
import os
import sys

lib = os.path.realpath(os.path.join(os.path.dirname(__file__),
                                    "..", "recipebook"))
if lib not in sys.path:
    sys.path.insert(0, lib)

from recipebook import RecipeBook, PrintLevel
from recipebook import find_changed_recipe_files, find_recipe_files

description = """recipebook creates a directed, acyclic graph (DAG) of Conda
recipes which allows us to sort them for building, ensuring those recipes that
are dependencies of others are build first.

Each node is a package name, version tuple and each edge represents a
dependency relationship. The graph is built by inspecting the meta.yaml files
in a set of Conda recipes. A topological sort of the graph provides a list of
packages and versions in an order suitable for building.

This used to be a capability of conda-build, which no longer supports
from-source build dependency calculation.
"""

parser = argparse.ArgumentParser(
    description=description,
    formatter_class=argparse.RawDescriptionHelpFormatter)

parser.add_argument("recipes",
                    help="Recipes directory, defaults to current directory",
                    type=str, nargs="?", default=".")

parser.add_argument("-p", "--package", type=str,
                    required=any(arg in sys.argv for arg in
                                 ["--provides", "-v", "--version"]),
                    help="Report dependency relationships for the "
                         "specified package. Defaults to reporting the "
                         "packages that the specified package depends on. "
                         "See --provides."
                         "Required by --provides and -v/--version.")
parser.add_argument("-v", "--version", type=str,
                    required=any(arg in sys.argv for arg in
                                 ["--provides", "-p", "--package"]),
                    help="Report dependency relationships of the "
                         "specified package version. Defaults to reporting "
                         "the packages that the specified package depends on. "
                         "See --provides."
                         "Required by --provides and -p/--package.")
parser.add_argument("-c", "--changes", type=str,
                    help="Report only on recipes that have changed "
                         "relative to another branch (defaults to 'master')")
parser.add_argument("--provides",
                    help="When reporting dependency relationships with "
                         "-p|--package and -v|--version, report the packages "
                         "which the specified package provides for. "
                         "i.e. those that are dependencies of the package, "
                         "rather than those it depends on."
                         "Requires -p/--package and -v/--version.",
                    action="store_true")
level_group = parser.add_mutually_exclusive_group()
level_group.add_argument("--sub-packages",
                         help="Report only sub-package names instead of root "
                              "package names. Excludes --output-packages.",
                         action="store_true")
level_group.add_argument("--output-packages",
                         help="Report package names that match outputs of "
                              "build, i.e. sub-package names if present and "
                              "root package names if not. Excludes --sub-packages.",
                         action="store_true")

parser.add_argument("--debug",
                    help="Enable DEBUG level logging to STDERR",
                    action="store_true")
parser.add_argument("--verbose",
                    help="Enable INFO level logging to STDERR",
                    action="store_true")

args = parser.parse_args()

log_level = log.ERROR
if args.debug:
    log_level = log.DEBUG
elif args.verbose:
    log_level = log.INFO
log.basicConfig(level=log_level)

package_level = PrintLevel.ROOT
if args.sub_packages:
    package_level = PrintLevel.SUB
elif args.output_packages:
    package_level = PrintLevel.OUT

args = parser.parse_args()


def main():
    root = args.recipes
    recipe_book = RecipeBook(find_recipe_files(root))

    if args.package and args.version:
        # Print a sub-graph for a specific package name and version
        nv = (args.package, parse(args.version))
        if nv in recipe_book.dependency_graph():
            if args.provides:
                recipe_book.print_descendants(nv, package_level)
            else:
                recipe_book.print_ancestors(nv, package_level)
        else:
            raise ValueError("Package {} version {} is not present "
                             "in the graph".format(nv[0], nv[1]))
    elif args.changes:
        # Print a unified list of all changed recipes
        changed_recipes = find_changed_recipe_files(root, args.changes)
        recipe_book = RecipeBook(changed_recipes)
        recipe_book.print_graph(package_level)
    else:
        # Print everything
        recipe_book.print_graph(package_level)


if __name__ == "__main__":
    main()
