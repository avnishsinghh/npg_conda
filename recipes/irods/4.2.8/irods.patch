diff --git CMakeLists.txt CMakeLists.txt
index dcfd763f9..0213eba00 100644
--- CMakeLists.txt
+++ CMakeLists.txt
@@ -27,36 +27,39 @@ macro(IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIE
   list(APPEND IRODS_PACKAGE_DEPENDENCIES_LIST irods-externals-${DEPENDENCY_SUBDIRECTORY})
 endmacro()
 
-IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH(CLANG clang6.0-0)
-IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH(CPPZMQ cppzmq4.2.3-0)
-IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(ARCHIVE libarchive3.3.2-1)
-IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(AVRO avro1.9.0-0)
-IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(BOOST boost1.67.0-0)
-IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(CLANG_RUNTIME clang-runtime6.0-0)
-IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(ZMQ zeromq4-14.1.6-0)
-IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(JSON json3.7.3-0)
-IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(CATCH2 catch22.3.0-0)
-IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(NANODBC nanodbc2.13.0-0)
-IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(FMT fmt6.1.2-1)
+# IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH(CLANG)
+# IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH(CPPZMQ)
+# IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(ARCHIVE)
+# IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(AVRO)
+# IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(BOOST)
+# IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(CLANG_RUNTIME)
+# IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(ZMQ)
+# IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(JSON)
+# IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(CATCH2)
+# IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(NANODBC)
+# IRODS_MACRO_CHECK_DEPENDENCY_SET_FULLPATH_ADD_TO_IRODS_PACKAGE_DEPENDENCIES_LIST(FMT)
 
 string(REPLACE ";" ", " IRODS_PACKAGE_DEPENDENCIES_STRING "${IRODS_PACKAGE_DEPENDENCIES_LIST}")
 
-if (NOT CLANG_STATIC_ANALYZER)
-  set(CLANG_STATIC_ANALYZER OFF CACHE BOOL "Choose whether to run Clang Static Analyzer." FORCE)
-  message(STATUS "Setting CLANG_STATIC_ANALYZER to 'OFF'.")
-  set(CMAKE_C_COMPILER ${IRODS_EXTERNALS_FULLPATH_CLANG}/bin/clang)
-  set(CMAKE_CXX_COMPILER ${IRODS_EXTERNALS_FULLPATH_CLANG}/bin/clang++)
-else()
-  set(CLANG_STATIC_ANALYZER ON CACHE BOOL "Choose whether to run Clang Static Analyzer." FORCE)
-  message(STATUS "Setting CLANG_STATIC_ANALYZER to 'ON'.")
-  set(CMAKE_C_COMPILER ${IRODS_EXTERNALS_FULLPATH_CLANG}/bin/ccc-analyzer)
-  set(CMAKE_CXX_COMPILER ${IRODS_EXTERNALS_FULLPATH_CLANG}/bin/c++-analyzer)
-endif()
+# if (NOT CLANG_STATIC_ANALYZER)
+#   set(CLANG_STATIC_ANALYZER OFF CACHE BOOL "Choose whether to run Clang Static Analyzer." FORCE)
+#   message(STATUS "Setting CLANG_STATIC_ANALYZER to 'OFF'.")
+#   set(CMAKE_C_COMPILER ${IRODS_EXTERNALS_FULLPATH_CLANG}/bin/clang)
+#   set(CMAKE_CXX_COMPILER ${IRODS_EXTERNALS_FULLPATH_CLANG}/bin/clang++)
+# else()
+#   set(CLANG_STATIC_ANALYZER ON CACHE BOOL "Choose whether to run Clang Static Analyzer." FORCE)
+#   message(STATUS "Setting CLANG_STATIC_ANALYZER to 'ON'.")
+#   set(CMAKE_C_COMPILER ${IRODS_EXTERNALS_FULLPATH_CLANG}/bin/ccc-analyzer)
+#   set(CMAKE_CXX_COMPILER ${IRODS_EXTERNALS_FULLPATH_CLANG}/bin/c++-analyzer)
+# endif()
 
-set(CMAKE_EXE_LINKER_FLAGS_INIT "${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++")
+set(CMAKE_EXE_LINKER_FLAGS_INIT "${CMAKE_EXE_LINKER_FLAGS} -Wl,-rpath-link,${CMAKE_INSTALL_PREFIX}")
 
 project(irods C CXX)
 
+include(GNUInstallDirs)
+include_directories(AFTER ${CMAKE_INSTALL_PREFIX}/include)
+# include_directories(${CMAKE_INSTALL_PREFIX}/lib)
 set(CMAKE_EXPORT_COMPILE_COMMANDS TRUE)
 
 if (NOT CPACK_PACKAGING_INSTALL_PREFIX)
@@ -64,18 +67,22 @@ if (NOT CPACK_PACKAGING_INSTALL_PREFIX)
   message(STATUS "Setting unspecified CPACK_PACKAGING_INSTALL_PREFIX to '${CPACK_PACKAGING_INSTALL_PREFIX}'. This is the correct setting for normal builds.")
 endif()
 
+set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
 set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
-set(CMAKE_INSTALL_RPATH ${IRODS_EXTERNALS_FULLPATH_CLANG_RUNTIME}/lib)
+set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/lib)
+
+set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -Wl,--export-dynamic") # export-dynamic so stacktrace entries from executables have function names
+set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -Wl,-z,defs")
+set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-z,defs")
+add_compile_options(-Wall -Wextra -Wno-unused-function -Wno-unused-parameter)
 
-set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -stdlib=libc++ -Wl,--export-dynamic -pthread") # export-dynamic so stacktrace entries from executables have function names
-set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -stdlib=libc++ -Wl,-z,defs -pthread")
-set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -stdlib=libc++ -Wl,-z,defs -pthread")
-add_compile_options(-nostdinc++ -Wall -Wextra -Werror -Wno-unused-function -Wno-unused-parameter)
-link_libraries(c++abi)
-include_directories(${IRODS_EXTERNALS_FULLPATH_CLANG}/include/c++/v1
-                    ${IRODS_EXTERNALS_FULLPATH_JSON}/include)
+include_directories(${IRODS_EXTERNALS_FULLPATH_JSON}/include/nlohmann
+                    ${IRODS_EXTERNALS_FULLPATH_CATCH2}/include/catch2)
 
+set(CMAKE_THREAD_PREFER_PTHREAD TRUE)
+set(THREADS_PREFER_PTHREAD_FLAG TRUE)
 find_package(Threads REQUIRED)
+
 find_package(OpenSSL REQUIRED)
 if (NOT PAM_LIBRARY)
   find_library(PAM_LIBRARY pam)
@@ -98,31 +105,33 @@ set(IRODS_COMPILE_DEFINITIONS ${IRODS_PLATFORM_STRING} _LARGEFILE_SOURCE _FILE_O
 
 if (NOT IRODS_LINUX_DISTRIBUTION_NAME)
   execute_process(
-    COMMAND "python" "-c" "from __future__ import print_function; import platform; print(platform.linux_distribution()[0].split()[0].strip().lower(), end='')"
+    COMMAND "lsb_release" "-i" "-s"
     RESULT_VARIABLE IRODS_EXECUTE_PROCESS_RESULT_LINUX_DISTRIBUTION_NAME
     OUTPUT_VARIABLE IRODS_LINUX_DISTRIBUTION_NAME
     )
+  string(STRIP ${IRODS_LINUX_DISTRIBUTION_NAME} IRODS_LINUX_DISTRIBUTION_NAME)
   if (NOT ${IRODS_EXECUTE_PROCESS_RESULT_LINUX_DISTRIBUTION_NAME} STREQUAL "0")
     message(FATAL_ERROR "Linux platform name detection failed\n${IRODS_EXECUTE_PROCESS_RESULT_LINUX_DISTRIBUTION_NAME}")
   endif()
-  set(IRODS_LINUX_DISTRIBUTION_NAME ${IRODS_LINUX_DISTRIBUTION_NAME} CACHE STRING "Linux distribution name, e.g. {ubuntu, centos, ...}." FORCE)
+  set(IRODS_LINUX_DISTRIBUTION_NAME ${IRODS_LINUX_DISTRIBUTION_NAME} CACHE STRING "Linux distribution name, e.g. {Ubuntu, CentOS, ...}." FORCE)
   message(STATUS "Setting unspecified IRODS_LINUX_DISTRIBUTION_NAME to '${IRODS_LINUX_DISTRIBUTION_NAME}'")
 endif()
 
 if (NOT IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR)
   execute_process(
-    COMMAND "python" "-c" "from __future__ import print_function; import platform; print(platform.linux_distribution()[1].strip().lower().split('.')[0], end='')"
+    COMMAND "lsb_release" "-r" "-s"
     RESULT_VARIABLE IRODS_EXECUTE_PROCESS_RESULT_LINUX_DISTRIBUTION_VERSION_MAJOR
     OUTPUT_VARIABLE IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR
     )
+  string(STRIP ${IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR} IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR)
   if (NOT ${IRODS_EXECUTE_PROCESS_RESULT_LINUX_DISTRIBUTION_VERSION_MAJOR} STREQUAL "0")
     message(FATAL_ERROR "Linux platform name detection failed\n${IRODS_EXECUTE_PROCESS_RESULT_LINUX_DISTRIBUTION_VERSION_MAJOR}")
   endif()
-  set(IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR ${IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR} CACHE STRING "Linux distribution name, e.g. {ubuntu, centos, ...}." FORCE)
+  set(IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR ${IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR} CACHE STRING "Linux distribution name, e.g. {Ubuntu, CentOS, ...}." FORCE)
   message(STATUS "Setting unspecified IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR to '${IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR}'")
 endif()
 
-if(IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "ubuntu" OR IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "debian")
+if(IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "Ubuntu" OR IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "Debian")
   if (NOT IRODS_LINUX_DISTRIBUTION_VERSION_CODENAME)
     execute_process(
       COMMAND "lsb_release" "-s" "-c"
@@ -133,19 +142,19 @@ if(IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "ubuntu" OR IRODS_LINUX_DISTRIBUTION_N
     if (NOT ${IRODS_EXECUTE_PROCESS_RESULT_LINUX_DISTRIBUTION_VERSION_CODENAME} STREQUAL "0")
       message(FATAL_ERROR "Linux lsb_release shortname detection failed\n${IRODS_EXECUTE_PROCESS_RESULT_LINUX_DISTRIBUTION_VERSION_CODENAME}")
     endif()
-    set(IRODS_LINUX_DISTRIBUTION_VERSION_CODENAME ${IRODS_LINUX_DISTRIBUTION_VERSION_CODENAME} CACHE STRING "Linux distribution version codename, e.g. {precise, wheezy, trusty, jessie, ...}." FORCE)
+    set(IRODS_LINUX_DISTRIBUTION_VERSION_CODENAME ${IRODS_LINUX_DISTRIBUTION_VERSION_CODENAME} CACHE STRING "Linux distribution version codename, e.g. {Precise, Wheezy, Trusty, Jessie, ...}." FORCE)
     message(STATUS "Setting unspecified IRODS_LINUX_DISTRIBUTION_VERSION_CODENAME to '${IRODS_LINUX_DISTRIBUTION_VERSION_CODENAME}'")
   endif()
 endif()
 
 if (NOT CPACK_GENERATOR)
-  if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "arch")
+  if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "Arch")
     set(CPACK_GENERATOR TGZ CACHE STRING "CPack generator to use, e.g. {DEB, RPM, TGZ}." FORCE)
     message(STATUS "Setting unspecified CPACK_GENERATOR to ${CPACK_GENERATOR}. This is the correct setting for normal builds.")
-  elseif(IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "ubuntu" OR IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "debian")
+  elseif(IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "Ubuntu" OR IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "Debian")
     set(CPACK_GENERATOR DEB CACHE STRING "CPack generator to use, e.g. {DEB, RPM, TGZ}." FORCE)
     message(STATUS "Setting unspecified CPACK_GENERATOR to ${CPACK_GENERATOR}. This is the correct setting for normal builds.")
-  elseif(IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "centos" OR IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "opensuse" OR IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "fedora")
+  elseif(IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "CentOS" OR IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "openSUSE project" OR IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "Fedora")
     set(CPACK_GENERATOR RPM CACHE STRING "CPack generator to use, e.g. {DEB, RPM, TGZ}." FORCE)
     message(STATUS "Setting unspecified CPACK_GENERATOR to ${CPACK_GENERATOR}. This is the correct setting for normal builds.")
   else()
@@ -205,7 +214,7 @@ git submodule update --init")
 endif()
 
 add_custom_command(
-  OUTPUT ${CMAKE_BINARY_DIR}/lib/core/include/server_control_plane_command.hpp
+ OUTPUT ${CMAKE_BINARY_DIR}/lib/core/include/server_control_plane_command.hpp
   COMMAND ${IRODS_EXTERNALS_FULLPATH_AVRO}/bin/avrogencpp -n irods -o ${CMAKE_BINARY_DIR}/lib/core/include/server_control_plane_command.hpp -i ${CMAKE_SOURCE_DIR}/irods_schema_messaging/v1/server_control_plane_command.json
   MAIN_DEPENDENCY ${CMAKE_SOURCE_DIR}/irods_schema_messaging/v1/server_control_plane_command.json
   )
@@ -1435,8 +1444,8 @@ set_property(TARGET genOSAuth PROPERTY CXX_STANDARD ${IRODS_CXX_STANDARD})
 target_compile_definitions(genOSAuth PRIVATE ${IRODS_COMPILE_DEFINITIONS})
 target_compile_options(genOSAuth PRIVATE -Wno-write-strings)
 
-set(IRODS_HOME_DIRECTORY var/lib/irods)
-set(IRODS_PLUGINS_DIRECTORY usr/lib/irods/plugins)
+set(IRODS_HOME_DIRECTORY ${CMAKE_INSTALL_LOCALSTATEDIR}/lib/irods)
+set(IRODS_PLUGINS_DIRECTORY ${CMAKE_INSTALL_LIBDIR}/irods/plugins)
 
 add_subdirectory(plugins/api)
 add_subdirectory(plugins/auth)
@@ -1492,13 +1501,13 @@ set(CPACK_DEBIAN_${IRODS_PACKAGE_COMPONENT_POSTGRES_NAME_UPPERCASE}_PACKAGE_DEPE
 set(CPACK_DEBIAN_${IRODS_PACKAGE_COMPONENT_POSTGRES_NAME_UPPERCASE}_PACKAGE_CONTROL_EXTRA "${CMAKE_SOURCE_DIR}/plugins/database/packaging/preinst;${CMAKE_SOURCE_DIR}/plugins/database/packaging/postinst;${CMAKE_SOURCE_DIR}/plugins/database/packaging/postrm;")
 
 set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_POSTGRES_NAME}_PACKAGE_NAME "irods-database-plugin-postgres")
-if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "centos")
+if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "CentOS")
   if (IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR STREQUAL "6" OR IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR STREQUAL "7")
     set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_POSTGRES_NAME}_PACKAGE_REQUIRES "${IRODS_PACKAGE_DEPENDENCIES_STRING}, irods-server = ${IRODS_VERSION}, unixODBC, postgresql, authd, postgresql-odbc")
   else()
     message(FATAL "Unsupported CentOS major version: ${IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR}")
   endif()
-elseif (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "opensuse")
+elseif (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "openSUSE project")
   set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_POSTGRES_NAME}_PACKAGE_REQUIRES "${IRODS_PACKAGE_DEPENDENCIES_STRING}, irods-server = ${IRODS_VERSION}, unixODBC, postgresql, psqlODBC")
 endif()
 set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_POSTGRES_NAME}_PRE_INSTALL_SCRIPT_FILE "${CMAKE_SOURCE_DIR}/plugins/database/packaging/preinst")
@@ -1507,19 +1516,19 @@ set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_POSTGRES_NAME}_POST_UNINSTALL_SCRIPT_FIL
 
 # mysql
 set(CPACK_DEBIAN_${IRODS_PACKAGE_COMPONENT_MYSQL_NAME_UPPERCASE}_PACKAGE_NAME "irods-database-plugin-mysql")
-if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "ubuntu")
+if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "Ubuntu")
   set(CPACK_DEBIAN_${IRODS_PACKAGE_COMPONENT_MYSQL_NAME_UPPERCASE}_PACKAGE_DEPENDS "${IRODS_PACKAGE_DEPENDENCIES_STRING}, irods-server (= ${CPACK_DEBIAN_PACKAGE_VERSION}), unixodbc, mysql-client, libc6")
 endif()
 set(CPACK_DEBIAN_${IRODS_PACKAGE_COMPONENT_MYSQL_NAME_UPPERCASE}_PACKAGE_CONTROL_EXTRA "${CMAKE_SOURCE_DIR}/plugins/database/packaging/preinst;${CMAKE_SOURCE_DIR}/plugins/database/packaging/postinst;${CMAKE_SOURCE_DIR}/plugins/database/packaging/postrm;")
 
 set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_MYSQL_NAME}_PACKAGE_NAME "irods-database-plugin-mysql")
-if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "centos")
+if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "CentOS")
   if (IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR STREQUAL "6" OR IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR STREQUAL "7")
     set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_MYSQL_NAME}_PACKAGE_REQUIRES "${IRODS_PACKAGE_DEPENDENCIES_STRING}, irods-server = ${IRODS_VERSION}, mysql, unixODBC, mysql-connector-odbc")
   else()
     message(FATAL "Unsupported CentOS major version: ${IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR}")
   endif()
-elseif (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "opensuse")
+elseif (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "openSUSE project")
   set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_MYSQL_NAME}_PACKAGE_REQUIRES "${IRODS_PACKAGE_DEPENDENCIES_STRING}, irods-server = ${IRODS_VERSION}, mysql-client, unixODBC, MyODBC-unixODBC")
 endif()
 set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_MYSQL_NAME}_PRE_INSTALL_SCRIPT_FILE "${CMAKE_SOURCE_DIR}/plugins/database/packaging/preinst")
@@ -1532,7 +1541,7 @@ set(CPACK_DEBIAN_${IRODS_PACKAGE_COMPONENT_ORACLE_NAME_UPPERCASE}_PACKAGE_DEPEND
 set(CPACK_DEBIAN_${IRODS_PACKAGE_COMPONENT_ORACLE_NAME_UPPERCASE}_PACKAGE_CONTROL_EXTRA "${CMAKE_SOURCE_DIR}/plugins/database/packaging/preinst;${CMAKE_SOURCE_DIR}/plugins/database/packaging/postinst;${CMAKE_SOURCE_DIR}/plugins/database/packaging/postrm;")
 
 set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_ORACLE_NAME}_PACKAGE_NAME "irods-database-plugin-oracle")
-if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "centos")
+if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "CentOS")
   if (IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR STREQUAL "6")
     set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_ORACLE_NAME}_PACKAGE_REQUIRES "${IRODS_PACKAGE_DEPENDENCIES_STRING}, irods-server = ${IRODS_VERSION}, unixODBC")
   elseif (IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR STREQUAL "7")
@@ -1540,7 +1549,7 @@ if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "centos")
   else()
     message(FATAL "Unsupported CentOS major version: ${IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR}")
   endif()
-elseif (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "opensuse")
+elseif (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "openSUSE project")
   set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_ORACLE_NAME}_PACKAGE_REQUIRES "${IRODS_PACKAGE_DEPENDENCIES_STRING}, irods-server = ${IRODS_VERSION}, unixODBC")
 endif()
 set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_ORACLE_NAME}_PRE_INSTALL_SCRIPT_FILE "${CMAKE_SOURCE_DIR}/plugins/database/packaging/preinst")
@@ -1597,20 +1606,20 @@ install(
   )
 
 
-set(IRODS_INCLUDE_DIRS usr/include/irods)
+set(IRODS_INCLUDE_DIRS include/irods)
 
 include(CMakePackageConfigHelpers)
 configure_package_config_file(
   ${CMAKE_SOURCE_DIR}/cmake/IRODSConfig.cmake.not_yet_installed.in
   ${CMAKE_BINARY_DIR}/IRODSConfig.cmake.not_yet_installed # suffix prevents cmake's find_package() from using this copy of the file
-  INSTALL_DESTINATION usr/lib/irods/cmake
+  INSTALL_DESTINATION  ${CMAKE_INSTALL_LIBDIR}/irods/cmake
   PATH_VARS IRODS_INCLUDE_DIRS
   )
 
 install(
   FILES
   ${CMAKE_BINARY_DIR}/IRODSConfig.cmake.not_yet_installed
-  DESTINATION usr/lib/irods/cmake
+  DESTINATION  ${CMAKE_INSTALL_LIBDIR}/irods/cmake
   COMPONENT ${IRODS_PACKAGE_COMPONENT_DEVELOPMENT_NAME}
   RENAME IRODSConfig.cmake
   )
@@ -1624,7 +1633,7 @@ write_basic_package_version_file(
 install(
   FILES
   ${CMAKE_BINARY_DIR}/IRODSConfigVersion.cmake
-  DESTINATION usr/lib/irods/cmake
+  DESTINATION  ${CMAKE_INSTALL_LIBDIR}/irods/cmake
   COMPONENT ${IRODS_PACKAGE_COMPONENT_DEVELOPMENT_NAME}
   )
 
@@ -1649,3 +1658,5 @@ foreach(DATABASE_PLUGIN postgres oracle mysql)
 endforeach()
 
 include(CPack)
+
+install(TARGETS irods_client DESTINATION ${CMAKE_INSTALL_LIBDIR})
diff --git cmake/development_library.cmake cmake/development_library.cmake
index a555a646e..043e01fb5 100644
--- cmake/development_library.cmake
+++ cmake/development_library.cmake
@@ -5,7 +5,7 @@ install(
   TARGETS
     RodsAPIs
   ARCHIVE
-    DESTINATION usr/lib
+    DESTINATION ${CMAKE_INSTALL_LIBDIR}
     COMPONENT ${IRODS_PACKAGE_COMPONENT_DEVELOPMENT_NAME}
   )
 
@@ -566,7 +566,7 @@ install(
   ${IRODS_SERVER_ICAT_INCLUDE_HEADERS}
   ${IRODS_SERVER_RE_INCLUDE_HEADERS}
   ${IRODS_SERVER_DRIVERS_INCLUDE_HEADERS}
-  DESTINATION usr/include/irods
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/irods
   COMPONENT ${IRODS_PACKAGE_COMPONENT_DEVELOPMENT_NAME}
   )
 
@@ -581,7 +581,7 @@ install(
 # NOTE: The trailing slash in the "DIRECTORY" argument is significant. DO NOT REMOVE IT!
 install(
   DIRECTORY ${CMAKE_SOURCE_DIR}/lib/filesystem/include/
-  DESTINATION usr/include/irods
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/irods
   COMPONENT ${IRODS_PACKAGE_COMPONENT_DEVELOPMENT_NAME}
   FILES_MATCHING
     PATTERN */filesystem.hpp
@@ -609,7 +609,7 @@ install(
 # NOTE: The trailing slash in the "DIRECTORY" argument is significant. DO NOT REMOVE IT!
 install(
   DIRECTORY ${CMAKE_SOURCE_DIR}/plugins/api/include/
-  DESTINATION usr/include/irods/plugins/api
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/irods/plugins/api
   COMPONENT ${IRODS_PACKAGE_COMPONENT_DEVELOPMENT_NAME}
   FILES_MATCHING
     PATTERN */api_plugin_number.h
@@ -628,7 +628,7 @@ install(
 # NOTE: The trailing slash in the "DIRECTORY" argument is significant. DO NOT REMOVE IT!
 install(
   DIRECTORY ${CMAKE_SOURCE_DIR}/lib/core/include/transport/
-  DESTINATION usr/include/irods/transport
+  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/irods/transport
   COMPONENT ${IRODS_PACKAGE_COMPONENT_DEVELOPMENT_NAME}
   FILES_MATCHING
     PATTERN */transport/transport.hpp
@@ -638,7 +638,7 @@ install(
 install(
   EXPORT
   IRODSTargets
-  DESTINATION usr/lib/irods/cmake
+  DESTINATION ${CMAKE_INSTALL_LIBDIR}/irods/cmake
   COMPONENT ${IRODS_PACKAGE_COMPONENT_DEVELOPMENT_NAME}
   )
 
@@ -646,8 +646,8 @@ set(CPACK_DEBIAN_${IRODS_PACKAGE_COMPONENT_DEVELOPMENT_NAME_UPPERCASE}_PACKAGE_N
 set(CPACK_DEBIAN_${IRODS_PACKAGE_COMPONENT_DEVELOPMENT_NAME_UPPERCASE}_PACKAGE_DEPENDS "libssl-dev")
 
 set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_DEVELOPMENT_NAME}_PACKAGE_NAME "irods-devel")
-if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "centos")
+if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "CentOS")
   set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_SERVER_NAME}_PACKAGE_REQUIRES "openssl-devel")
-elseif (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "opensuse")
+elseif (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "OpenSUSE project")
   set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_SERVER_NAME}_PACKAGE_REQUIRES "libopenssl-devel")
 endif()
diff --git cmake/runtime_library.cmake cmake/runtime_library.cmake
index 408c27fe0..806b3d7cd 100644
--- cmake/runtime_library.cmake
+++ cmake/runtime_library.cmake
@@ -6,7 +6,7 @@ install(
   irods_server
   EXPORT IRODSTargets
   LIBRARY
-  DESTINATION usr/lib
+  DESTINATION ${CMAKE_INSTALL_LIBDIR}
   COMPONENT ${IRODS_PACKAGE_COMPONENT_RUNTIME_NAME}
   )
 
@@ -15,9 +15,9 @@ set(CPACK_DEBIAN_${IRODS_PACKAGE_COMPONENT_RUNTIME_NAME_UPPERCASE}_PACKAGE_DEPEN
 
 
 set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_RUNTIME_NAME}_PACKAGE_NAME "irods-runtime")
-if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "centos")
+if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "CentOS")
   set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_RUNTIME_NAME}_PACKAGE_REQUIRES "${IRODS_PACKAGE_DEPENDENCIES_STRING}, libxml2, openssl, python, python-psutil, python-requests, python-jsonschema")
-elseif (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "opensuse")
+elseif (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "OpenSUSE project")
   set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_RUNTIME_NAME}_PACKAGE_REQUIRES "${IRODS_PACKAGE_DEPENDENCIES_STRING}, libopenssl1_0_0, python, openssl, python-psutil, python-requests, python-jsonschema")
 endif()
 
diff --git cmake/server.cmake cmake/server.cmake
index 4a032ecd9..2d8b9e5e0 100644
--- cmake/server.cmake
+++ cmake/server.cmake
@@ -8,7 +8,7 @@ install(
   irodsXmsgServer
   hostname_resolves_to_local_address
   RUNTIME
-  DESTINATION usr/sbin
+  DESTINATION sbin
   COMPONENT ${IRODS_PACKAGE_COMPONENT_SERVER_NAME}
   )
 
@@ -145,7 +145,7 @@ install(
   TARGETS
   irodsPamAuthCheck
   RUNTIME
-  DESTINATION usr/sbin
+  DESTINATION sbin
   COMPONENT ${IRODS_PACKAGE_COMPONENT_SERVER_NAME}
   PERMISSIONS SETUID OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE
   )
@@ -154,7 +154,7 @@ install(
   TARGETS
   genOSAuth
   RUNTIME
-  DESTINATION var/lib/irods/clients/bin
+  DESTINATION lib/irods/clients/bin
   COMPONENT ${IRODS_PACKAGE_COMPONENT_SERVER_NAME}
   )
 
@@ -175,16 +175,16 @@ set(CPACK_DEBIAN_${IRODS_PACKAGE_COMPONENT_SERVER_NAME_UPPERCASE}_PACKAGE_BREAKS
 set(CPACK_DEBIAN_${IRODS_PACKAGE_COMPONENT_SERVER_NAME_UPPERCASE}_PACKAGE_REPLACES "irods-icat, irods-resource")
 set(CPACK_DEBIAN_${IRODS_PACKAGE_COMPONENT_SERVER_NAME_UPPERCASE}_PACKAGE_CONTROL_EXTRA "${CMAKE_SOURCE_DIR}/preinst;${CMAKE_SOURCE_DIR}/postinst;${CMAKE_SOURCE_DIR}/prerm;")
 
-if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "ubuntu" AND IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR STREQUAL "12")
+if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "Ubuntu" AND IRODS_LINUX_DISTRIBUTION_VERSION_MAJOR STREQUAL "12")
 else()
   set(CPACK_DEBIAN_${IRODS_PACKAGE_COMPONENT_SERVER_NAME_UPPERCASE}_PACKAGE_DEPENDS "${CPACK_DEBIAN_${IRODS_PACKAGE_COMPONENT_SERVER_NAME_UPPERCASE}_PACKAGE_DEPENDS}, python-jsonschema")
 endif()
 
 
 set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_SERVER_NAME}_PACKAGE_NAME "irods-server")
-if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "centos")
+if (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "CentOS")
   set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_SERVER_NAME}_PACKAGE_REQUIRES "${IRODS_PACKAGE_DEPENDENCIES_STRING}, irods-runtime = ${IRODS_VERSION}, irods-icommands = ${IRODS_VERSION}, openssl, python, python-psutil, python-requests, python-jsonschema")
-elseif (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "opensuse")
+elseif (IRODS_LINUX_DISTRIBUTION_NAME STREQUAL "OpenSUSE project")
   set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_SERVER_NAME}_PACKAGE_REQUIRES "${IRODS_PACKAGE_DEPENDENCIES_STRING}, irods-runtime = ${IRODS_VERSION}, irods-icommands = ${IRODS_VERSION}, libopenssl1_0_0, python, openssl, python-psutil, python-requests, python-jsonschema")
 endif()
 set(CPACK_RPM_${IRODS_PACKAGE_COMPONENT_SERVER_NAME}_PRE_INSTALL_SCRIPT_FILE "${CMAKE_SOURCE_DIR}/preinst")
diff --git lib/core/src/irods_default_paths.cpp lib/core/src/irods_default_paths.cpp
index 051658f09..eca9ea661 100644
--- lib/core/src/irods_default_paths.cpp
+++ lib/core/src/irods_default_paths.cpp
@@ -18,7 +18,7 @@ namespace irods {
         try {
             boost::filesystem::path path{dl_info.dli_fname};
             path = boost::filesystem::canonical(path);
-            path.remove_filename().remove_filename().remove_filename(); // Removes filename and the two directories (usr and lib) between libirods_common.so and base of irods install
+            path.remove_filename().remove_filename(); // Removes the filename and the lib directory between libirods_common.so and the base of the irods install
             return path;
         } catch(const boost::filesystem::filesystem_error& e) {
             THROW(-1, e.what());
@@ -42,7 +42,7 @@ namespace irods {
     boost::filesystem::path
     get_irods_default_plugin_directory() {
         boost::filesystem::path path{get_irods_root_directory()};
-        path.append("usr").append("lib").append("irods").append("plugins");
+        path.append("lib").append("irods").append("plugins");
         return path;
     }
 }
diff --git lib/core/src/user_administration.cpp lib/core/src/user_administration.cpp
index a66223d68..71ee40369 100644
--- lib/core/src/user_administration.cpp
+++ lib/core/src/user_administration.cpp
@@ -18,6 +18,7 @@
 
 #include <array>
 #include <iostream>
+#include <cstring>
 
 namespace irods::experimental::administration::NAMESPACE_IMPL
 {
diff --git plugins/database/CMakeLists.txt plugins/database/CMakeLists.txt
index 3a1b55e5e..ffd8b03f9 100644
--- plugins/database/CMakeLists.txt
+++ plugins/database/CMakeLists.txt
@@ -42,7 +42,7 @@ foreach(PLUGIN ${IRODS_DATABASE_PLUGINS})
 
   add_custom_command(
     OUTPUT ${CMAKE_BINARY_DIR}/icatSysTables_${PLUGIN}.sql
-    COMMAND cpp -E -P -D${PLUGIN} ${CMAKE_BINARY_DIR}/plugins/database/src/icatSysTables.sql.pp ${CMAKE_BINARY_DIR}/icatSysTables_${PLUGIN}.sql
+    COMMAND ${CPP} -E -P -D${PLUGIN} ${CMAKE_BINARY_DIR}/plugins/database/src/icatSysTables.sql.pp ${CMAKE_BINARY_DIR}/icatSysTables_${PLUGIN}.sql
     MAIN_DEPENDENCY ${CMAKE_BINARY_DIR}/plugins/database/src/icatSysTables.sql.pp
     )
   add_custom_target(IRODS_PHONY_TARGET_icatSysTables_${PLUGIN}.sql ALL DEPENDS ${CMAKE_BINARY_DIR}/icatSysTables_${PLUGIN}.sql) # Forces execution of custom_command
